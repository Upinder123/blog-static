{"version":3,"sources":["components/Header/index.js","components/Hero/index.js","containers/About/index.js","components/BlogPost/index.js","components/Sidebar/index.js","containers/Post/index.js","components/Projects/index.js","components/AllPosts/index.js","pages/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_props","className","href","target","rel","Hero","props","style","textDecoration","About","BlogPost","useState","post","setPost","setPostId","useEffect","postId","match","params","blogPost","data","find","id","blogImage","blogTitle","blogCategory","src","width","blogText","postedOn","author","Sidebar","posts","setPosts","map","to","Post","height","overflow","Projects","AllPosts","MainPage","App","color","document","querySelector","textContent","toLowerCase","setProperty","exact","path","component","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2bcecb0.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\n\n/**\n* @author\n* @function Header\n* */\n\nconst Header = (_props) => (\n  <div>\n    <header className=\"header\">\n      <div>\n        {' '}\n&nbsp;\n        <a href=\"https://www.linkedin.com/in/upinderjit singh/\" target=\"_blank\" rel=\"noreferrer\">\n          <i className=\"fa fa-linkedin-square\" />\n          {' '}\n        </a>\n        <a href=\"https://github.com/upinder123\">\n          <i className=\"fa fa-github-square\" />\n          {' '}\n        </a>\n      </div>\n    </header>\n  </div>\n);\n\nexport default Header;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\n\n/**\n* @author\n* @function Hero\n* */\n\nconst Hero = (props) => (\n  <div className=\"hero-image\">\n    <div className=\"content\">\n      <a href=\"/\" style={{ textDecoration: 'none!important' }}>\n        {' '}\n        <span className=\"title\">\n          React\n          <span>Blog</span>\n        </span>\n      </a>\n    </div>\n  </div>\n);\n\nexport default Hero;\n","import React from 'react'\n\n/**\n* @author\n* @function About\n**/\n\nconst About = (props) => {\n  return(\n    <div>About</div>\n   )\n\n }\n\nexport default About","\nimport React, { useState, useEffect } from 'react';\n\nimport blogPost from '../../data/blog.json';\n\n/**\n* @author\n* @function BlogPost\n* */\n\nconst BlogPost = (props) => {\n  const [post, setPost] = useState({});\n  // reload the content\n  const [postId, setPostId] = useState('');\n\n  useEffect(() => {\n    const { postId } = props.match.params;\n    const post = blogPost.data.find((post) => post.id == postId);\n    setPost(post);\n    setPostId(postId);\n  }, [post, props.match.params.postId]);\n\n  if (post.blogImage == '') return null;\n\n  return (\n    <div>\n\n      <div className=\"blog-post-container\">\n\n        <h3 className=\"my-5\">{post.blogTitle}</h3>\n        <div className=\"post-thumb\">\n\n          <span className=\"blog-post-tag\">{post.blogCategory}</span>\n          <img src={post.blogImage} style={{ width: '100%' }} />\n\n          {/* <img src={require('../../assets/images/mustang.jpg')} /> */}\n        </div>\n        <div className=\"blog-post-text\">\n\n          <div>{post.blogText}</div>\n          <p className=\"mt-5 text-muted\">\n            Posted on:\n            {post.postedOn}\n            {' '}\n            by\n            {post.author}\n          </p>\n        </div>\n\n      </div>\n    </div>\n\n  );\n};\n\nexport default BlogPost;\n","\nimport React, { useState, useEffect } from 'react';\nimport blogPost from '../../data/blog.json';\nimport { NavLink } from 'react-router-dom';\n\n/**\n* @author\n* @function Sidebar \n**/\n\nconst Sidebar = (props) => {\n\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n\n    const posts = blogPost.data;\n    setPosts(posts);\n  }, posts);\n\n  return (\n\n    <div>\n\n      {\n        posts.map(post => {\n\n          return (\n\n\n\n\n            <div key=\"image\">\n\n\n              <img style={{ width: \"100%\" }} src={post.blogImage} />\n\n\n              <NavLink key={post.id} to={`/post/${post.id}`}>  <div className=\"post-title\">{post.blogTitle}</div>  </NavLink>\n\n\n\n\n            </div>\n\n\n\n\n\n\n          )\n\n        })\n      }\n\n    </div>\n  )\n\n}\n\nexport default Sidebar;\n","import React from 'react'\n\n\nimport BlogPost from '../../components/BlogPost';\nimport Sidebar from '../../components/Sidebar';\n/**\n* @author\n* @function Post\n**/\n\nconst Post = (props) => {\n\n  return(\n\n<div className=\"row justify-content-between\">\n<div className=\"col-md-8 \">\n<BlogPost {...props}/>\n\n\n</div>\n<div className=\"col-md-offset-2 col-md-2 mt-5\" style={{height:\"50vh\", overflow:\"hidden\"}}><Sidebar /></div>\n\n</div>\n\n   )\n\n }\n\nexport default Post\n","import React, { useState, useEffect } from 'react';\nimport blogPost from '../../data/blog.json';\n\n/**\n* @author\n* @function BlogPost\n**/\n\nconst Projects = (props) => {\n\n  const [Projects, setPost] = useState({});\n\n  //reload the content\n  const [postId, setPostId] = useState(\"\");\n\n  useEffect(() => {\n    const postId = props.match.params.postId;\n    const Projects = blogPost.data.find(post => post.id == postId);\n    setPost(Projects);\n    setPostId(postId);\n  }, [Projects, props.match.params.postId]);\n\n  if (Projects.blogImage === \"\")\n    return null;\n\n  return (\n  \n    <div>\n      <div className=\"blog-post-container\">\n        <h3 className=\"my-5\">{Projects.blogTitle}</h3>\n        <div className=\"post-thumb\">\n          <span className=\"blog-post-tag\">{Projects.blogCategory}</span>\n          <img src={Projects.blogImage} style={{ width: \"100%\" }} />\n\n          {/* <img src={require('../../assets/images/mustang.jpg')} /> */}\n        </div>\n        <div className=\"blog-post-text\">\n\n          <div>{Projects.blogText}</div>\n          <p className=\"mt-5 text-muted\">Posted on: {Projects.postedOn} by {Projects.author}</p>\n        </div>\n\n      </div></div>\n\n  )\n\n}\n\nexport default Projects;\n","\n\nimport React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport blogPost from '../../data/blog.json';\n\n/**\n* @author\n* @function AllPosts\n* */\n\nconst AllPosts = (_props) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(()=>{\n    const posts = blogPost.data;\n    setPosts(posts);\n  }, posts);\n\n  return (\n\n    <div className=\"row\">\n\n      {\n  posts.map((post) => (\n\n    <div className=\"col-md-3\">\n\n      <img src={post.blogImage} style={{ width: '100%' }} />\n\n      <p className=\"lead\">\n        <NavLink key={post.id} to={`/post/${post.id}`}>\n          {' '}\n          <div className=\"post-title\">{post.blogTitle}</div>\n          {' '}\n        </NavLink>\n\n      </p>\n\n    </div>\n\n  ))\n}\n\n    </div>\n  );\n};\n\nexport default AllPosts;\n","import React from \"react\";\n\nimport AllPosts from '../components/AllPosts';\nconst MainPage = () => {\n    return(\n\n        <div>\n            <h3 className=\"my-3\">All Posts</h3>\n            <AllPosts />\n        </div>\n  \n\n    )\n}\n\nexport  default MainPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Hero from './components/Hero';\nimport About from './containers/About';\nimport Post from './containers/Post';\nimport Projects from './components/Projects';\nimport AllPosts from './components/AllPosts';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport MainPage from './pages';\n\nclass App extends Component {\n  componentDidUpdate() {\n    let header = document.querySelector(\"h1\");\n    let text = header.textContent.toLowerCase();\n    let color;\n    switch (text) {\n      case 'about':\n        color = \"#16A085\";\n        break;\n      case 'projects':\n        color = \"#E74C3C\";\n        break;\n      case 'contacts':\n        color = \"#2980B9\";\n        break;\n      case 'blog':\n        color = \"#2980B9\";\n        break;\n      default:\n        color = \"#F1C40F\";\n        break;\n    }\n    let root = document.querySelector(\":root\");\n    root.style.setProperty(\"--color-home\", color);\n  };\n  render() { return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <nav className=\"Navbar\">\n            <h2>UJ</h2>\n            <ul>\n              <li>\n                <Link to=\"/about\">about</Link>\n              </li>\n              <li>\n                <Link to=\"/Projects\">Projects</Link>\n              </li>\n              <li>\n                <Link to=\"/contacts\">contacts</Link>\n              </li>\n              <li>\n                <Link to=\"/\">Blog</Link>\n              </li>\n            </ul>\n          </nav>\n          <Hero />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={MainPage} />\n              <Route path=\"/about\" component={About} />\n              <Route exact path=\"/post/:postId\" component={Post} />\n              <Route path=\"/about\"><h1>About</h1></Route>\n              <Route path=\"/Projects\" component={Projects}><h1>Projects</h1></Route>\n              <Route path=\"/contacts\"><h1>Contacts</h1></Route>\n              <Route path=\"/\" ><h1>Blog</h1></Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}